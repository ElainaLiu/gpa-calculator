{"version":3,"sources":["logo.svg","components/TextInput/TextInput.js","pages/Calculator/CalculatorPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextInput","gradeTable","CalculatorPage","props","state","rows","grade","hours","addRow","bind","e","index","target","className","key","name","newRows","this","value","setState","i","gpa","totalHours","length","isNaN","Number","gpa_round","toFixed","document","getElementById","innerHTML","map","j","type","onChange","handleChange","push","renderTable","onClick","handleSubmit","handleClear","id","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,kC,2KCU5BC,ICLTC,EAAa,CACf,EAAK,EACL,KAAM,IACN,KAAM,IACN,EAAK,EACL,KAAM,IACN,KAAM,IACN,EAAK,EACL,KAAM,IACN,KAAM,IACN,EAAK,EACL,EAAK,GA+FMC,E,kDA3FX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,CACF,CACIC,MAAO,GACPC,MAAO,MAInB,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBAVA,E,yDAYLC,GACT,IAAIC,EAAQD,EAAEE,OAAOC,UACjBC,EAAMJ,EAAEE,OAAOG,KACfC,EAAUC,KAAKb,MAAMC,KACzBW,EAAQL,GAAOG,GAAOJ,EAAEE,OAAOM,MAC/BD,KAAKE,SAAS,CAACd,KAAMW,M,mCAEZN,GACT,IAAIU,EAAI,EACJC,EAAM,EACNC,EAAa,EACjB,IAAIF,EAAE,EAAGA,EAAEH,KAAKb,MAAMC,KAAKkB,SAASH,EAAE,CAClC,IAAId,EAAQW,KAAKb,MAAMC,KAAKe,GAAhB,MACRb,EAAQU,KAAKb,MAAMC,KAAKe,GAAhB,MACZ,GAAY,IAATb,KAAiBD,KAASL,IAAeM,GAAS,GAAKiB,MAAMjB,GAC5D,OAKJe,GAHAf,EAAQkB,OAAOlB,GAIfc,IAHAf,EAAQL,EAAWK,IACEC,EAKzB,IAAImB,GADJL,GAAUC,GACUK,QAAQ,GAC5BC,SAASC,eAAe,OAAOC,UAAYJ,I,kCAEnChB,GAKRO,KAAKE,SAAS,CAACd,KAJD,CAAC,CACXC,MAAO,GACPC,MAAO,OAGXqB,SAASC,eAAe,OAAOC,UAAY,K,oCAEhC,IAAD,OACV,OAAOb,KAAKb,MAAMC,KAAK0B,KAAI,SAACC,EAAGZ,GAC3B,OACI,4BACI,4BACI,2BAAOL,KAAK,QAAQF,UAAWO,EAAGa,KAAK,OAAOf,MAAO,EAAKd,MAAMC,KAAKe,GAAhB,MAA6Bc,SAAU,EAAKC,aAAa1B,KAAK,MAEvH,4BACI,2BAAOM,KAAK,QAAQF,UAAWO,EAAGa,KAAK,OAAOf,MAAO,EAAKd,MAAMC,KAAKe,GAAhB,MAA6Bc,SAAU,EAAKC,aAAa1B,KAAK,Y,+BAOnI,IAAIO,EAAUC,KAAKb,MAAMC,KACzBW,EAAQoB,KAAK,CACT9B,MAAO,GACPC,MAAO,KAEXU,KAAKE,SAAS,CAACd,KAAMW,M,+BAGrB,OACA,yBAAKH,UAAU,OACX,4BAAQA,UAAU,cAClB,8CACA,+BACI,4BACI,qCACA,6CAEJI,KAAKoB,eAET,4BAAQJ,KAAK,SAASK,QAASrB,KAAKT,QAApC,KACA,4BAAQyB,KAAK,SAASK,QAASrB,KAAKsB,aAAa9B,KAAKQ,OAAtD,mBACA,4BAAQgB,KAAK,SAASK,QAASrB,KAAKuB,YAAY/B,KAAKQ,OAArD,kBACA,4BAAQwB,GAAG,c,GArFMC,a,MCNdC,MARf,WACE,OACE,6BACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW3C,MCIb4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDwHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.575807a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\n\r\nfunction TextInput(props) {\r\n    return (\r\n        <form>\r\n            <input type=\"text\"/>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TextInput;","import React, { Component } from 'react';\r\nimport { TextInput } from '../../components/TextInput';\r\nimport './styles.css';\r\nimport logo from '../../logo.svg';\r\n\r\nconst gradeTable = {\r\n    \"A\": 4.0,\r\n    \"A-\": 3.7,\r\n    \"B+\": 3.3,\r\n    \"B\": 3.0,\r\n    \"B-\": 2.7,\r\n    \"C+\": 2.3,\r\n    \"C\": 2.0,\r\n    \"C-\": 1.7,\r\n    \"D+\": 1.3,\r\n    \"D\": 1.0,\r\n    \"E\": 0.0\r\n}\r\n\r\nclass CalculatorPage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            rows: [\r\n                {\r\n                    grade: '',\r\n                    hours: ''\r\n                }\r\n            ]\r\n        };\r\n        this.addRow = this.addRow.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        let index = e.target.className;\r\n        let key = e.target.name;\r\n        let newRows = this.state.rows;\r\n        newRows[index][key] = e.target.value;\r\n        this.setState({rows: newRows});\r\n    }\r\n    handleSubmit(e){\r\n        let i = 0;\r\n        let gpa = 0;\r\n        let totalHours = 0;\r\n        for(i=0; i<this.state.rows.length;++i){\r\n            let grade = this.state.rows[i][\"grade\"];\r\n            let hours = this.state.rows[i][\"hours\"];\r\n            if(hours == '' || !(grade in gradeTable) || hours <= 0 || isNaN(hours)){\r\n                return;\r\n            }\r\n            hours = Number(hours);\r\n            grade = gradeTable[grade];\r\n            let result = grade * hours;\r\n            totalHours = totalHours + hours;\r\n            gpa = gpa + result;\r\n        }\r\n        gpa = gpa/totalHours;\r\n        let gpa_round = gpa.toFixed(3);\r\n        document.getElementById(\"out\").innerHTML = gpa_round;\r\n    }\r\n    handleClear(e){\r\n        let newRows = [{\r\n            grade: '',\r\n            hours: ''\r\n        }]\r\n        this.setState({rows: newRows});\r\n        document.getElementById(\"out\").innerHTML = '';\r\n    }\r\n    renderTable() {\r\n        return this.state.rows.map((j, i) => {\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <input name='grade' className={i} type='text' value={this.state.rows[i][\"grade\"]} onChange={this.handleChange.bind(this)}></input>\r\n                    </td>\r\n                    <td>\r\n                        <input name='hours' className={i} type='text' value={this.state.rows[i][\"hours\"]} onChange={this.handleChange.bind(this)}></input>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n    addRow() {\r\n        let newRows = this.state.rows;\r\n        newRows.push({\r\n            grade: '',\r\n            hours: ''\r\n        });\r\n        this.setState({rows: newRows});\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n            <h1>GPA Calculator</h1>\r\n            <table>\r\n                <tr>\r\n                    <th>Grade</th>\r\n                    <th>Credit Hours</th>\r\n                </tr>\r\n               {this.renderTable()}\r\n            </table>\r\n            <button type='button' onClick={this.addRow}>+</button>\r\n            <button type='button' onClick={this.handleSubmit.bind(this)}>Click to submit</button>\r\n            <button type='button' onClick={this.handleClear.bind(this)}>Click to reset</button>\r\n            <output id='out'></output>\r\n            </header>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatorPage;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { CalculatorPage } from './pages/Calculator';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Route path='/' component={CalculatorPage}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}